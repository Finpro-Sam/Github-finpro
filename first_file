/app.py
/requirements.txt
/render.yaml
# app.py
import pandas as pd
import plotly.graph_objs as go
from dash import Dash, dcc, html, Input, Output
import yagmail
import requests
import io
import threading
import time

# === CONFIGURATION ===
CSV_URL = "https://drive.google.com/uc?export=download&id=1HEcZ1BgJTG3VqlfnhIEq8llEtW-lJbWk"
REFRESH_INTERVAL = 300  # 5 minutes

# === GLOBAL STORAGE ===
price_df = pd.DataFrame()
volume_df = pd.DataFrame()

def load_data_from_drive():
    global price_df, volume_df
    try:
        print("Fetching latest CSV from Google Drive...")
        content = requests.get(CSV_URL).content
        df = pd.read_csv(io.StringIO(content.decode('utf-8')))
        df.set_index('stock name', inplace=True)

        price_df = df.drop(columns=['volume_std'], errors='ignore')
        volume_df = df[['volume_std']]
        price_df['price_std'] = price_df.std(axis=1)
        price_df['mean_price'] = price_df.drop(columns=['price_std'], errors='ignore').mean(axis=1)

        print("CSV updated.")
    except Exception as e:
        print(f"Failed to load CSV: {e}")

# === AUTO REFRESH ===
def start_auto_refresh():
    def loop():
        while True:
            load_data_from_drive()
            time.sleep(REFRESH_INTERVAL)
    thread = threading.Thread(target=loop, daemon=True)
    thread.start()

# === STOCK ANALYSIS ===
def plot_stock_return_fig(stock_name):
    stock_prices = price_df.loc[stock_name].drop(['price_std', 'mean_price']).sort_index().astype(float)
    mean = price_df.loc[stock_name, 'mean_price']
    std = price_df.loc[stock_name, 'price_std']
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=stock_prices.index, y=stock_prices.values, mode='lines+markers', name='Price'))
    for i in [1, 2]:
        fig.add_trace(go.Scatter(x=stock_prices.index, y=[mean + i * std] * len(stock_prices), mode='lines', name=f'+{i}œÉ'))
        fig.add_trace(go.Scatter(x=stock_prices.index, y=[mean - i * std] * len(stock_prices), mode='lines', name=f'-{i}œÉ'))
    fig.add_trace(go.Scatter(x=stock_prices.index, y=[mean] * len(stock_prices), mode='lines', name='Mean'))
    fig.update_layout(title=f"Price Trend: {stock_name}", xaxis_title='Date', yaxis_title='Price')
    return fig

def stocks_crossing_2nd_std():
    if price_df.empty: return []
    latest_date = price_df.columns[-3]
    return price_df[price_df[latest_date] < (price_df['mean_price'] - 2 * price_df['price_std'])].index.tolist()

def high_volume_spikes():
    if volume_df.empty: return []
    volume_cols = volume_df.columns[:-1]
    last_day = volume_cols[-1]
    last_7_avg = volume_df[volume_cols[-7:]].mean(axis=1)
    return volume_df[volume_df[last_day] > last_7_avg].index.tolist()

def get_buzzing_stocks():
    return list(set(stocks_crossing_2nd_std()).union(high_volume_spikes()))

# === DASH APP ===
app = Dash(__name__)
server = app.server  # For Render

app.layout = html.Div([
    html.H2("üìä Stock Price Analyzer"),
    dcc.Dropdown(id='stock-dropdown', options=[], placeholder="Select stock...", style={'width': '50%'}),
    dcc.Graph(id='price-graph'),
    html.Div([
        html.Div([html.H4("üìâ Below -2œÉ"), html.Ul(id='std-list')], style={'width': '32%', 'display': 'inline-block'}),
        html.Div([html.H4("üî• Volume Spikes"), html.Ul(id='volume-list')], style={'width': '32%', 'display': 'inline-block'}),
        html.Div([html.H4("üöÄ Buzzing Stocks"), html.Ul(id='buzzing-list')], style={'width': '32%', 'display': 'inline-block'})
    ]),
    html.Div([
        dcc.Input(id='email-input', type='text', placeholder='Enter email(s), comma-separated'),
        html.Button('Send Report', id='send-btn', n_clicks=0),
        html.Div(id='send-status')
    ])
], style={'padding': '20px'})

@app.callback(Output('stock-dropdown', 'options'), Input('price-graph', 'id'))
def update_dropdown(_):
    return [{'label': s, 'value': s} for s in price_df.index]

@app.callback(Output('price-graph', 'figure'), Input('stock-dropdown', 'value'))
def update_graph(stock_name):
    if not stock_name: return go.Figure()
    return plot_stock_return_fig(stock_name)

@app.callback(
    Output('std-list', 'children'),
    Output('volume-list', 'children'),
    Output('buzzing-list', 'children'),
    Input('stock-dropdown', 'value')
)
def update_lists(_):
    return (
        [html.Li(s) for s in stocks_crossing_2nd_std()],
        [html.Li(s) for s in high_volume_spikes()],
        [html.Li(s) for s in get_buzzing_stocks()]
    )

@app.callback(Output('send-status', 'children'), Input('send-btn', 'n_clicks'), Input('email-input', 'value'), prevent_initial_call=True)
def send_email(n_clicks, email_str):
    if not email_str: return "Please enter email(s)."
    try:
        email_list = [e.strip() for e in email_str.split(',')]
        content = f"""
        -2œÉ Drops: {', '.join(stocks_crossing_2nd_std())}
        Volume Spikes: {', '.join(high_volume_spikes())}
        Buzzing Stocks: {', '.join(get_buzzing_stocks())}
        """
        yag = yagmail.SMTP(user='your_email@gmail.com', password='your_app_password')
        yag.send(to=email_list, subject="üìà Stock Alert Summary", contents=content)
        return "‚úÖ Email sent."
    except Exception as e:
        return f"‚ùå Email error: {e}"

# === INIT ===
load_data_from_drive()
start_auto_refresh()

if __name__ == '__main__':
    app.run_server(debug=False, host='0.0.0.0', port=8050)
